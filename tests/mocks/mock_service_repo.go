// Code generated by mockery v2.53.5. DO NOT EDIT.

package testmocks

import (
	context "context"

	store "github.com/ikshavaku/catalogue/store"
	mock "github.com/stretchr/testify/mock"
)

// IServiceRepository is an autogenerated mock type for the IServiceRepository type
type IServiceRepository struct {
	mock.Mock
}

// GetServiceByID provides a mock function with given fields: _a0, _a1
func (_m *IServiceRepository) GetServiceByID(_a0 context.Context, _a1 store.GetServiceByIDParams) (store.ServiceDAO, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceByID")
	}

	var r0 store.ServiceDAO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, store.GetServiceByIDParams) (store.ServiceDAO, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, store.GetServiceByIDParams) store.ServiceDAO); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(store.ServiceDAO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, store.GetServiceByIDParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServiceVersions provides a mock function with given fields: _a0, _a1
func (_m *IServiceRepository) ListServiceVersions(_a0 context.Context, _a1 store.ListServiceVersionsByServiceIDParams) ([]store.ServiceVersionDAO, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceVersions")
	}

	var r0 []store.ServiceVersionDAO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, store.ListServiceVersionsByServiceIDParams) ([]store.ServiceVersionDAO, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, store.ListServiceVersionsByServiceIDParams) []store.ServiceVersionDAO); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]store.ServiceVersionDAO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, store.ListServiceVersionsByServiceIDParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServices provides a mock function with given fields: _a0, _a1
func (_m *IServiceRepository) ListServices(_a0 context.Context, _a1 store.ListServicesParams) (store.PaginatedResponse[store.ServiceDAO], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListServices")
	}

	var r0 store.PaginatedResponse[store.ServiceDAO]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, store.ListServicesParams) (store.PaginatedResponse[store.ServiceDAO], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, store.ListServicesParams) store.PaginatedResponse[store.ServiceDAO]); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(store.PaginatedResponse[store.ServiceDAO])
	}

	if rf, ok := ret.Get(1).(func(context.Context, store.ListServicesParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIServiceRepository creates a new instance of IServiceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIServiceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IServiceRepository {
	mock := &IServiceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
