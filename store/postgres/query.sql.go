// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countServices = `-- name: CountServices :one
SELECT COUNT(*) AS total
FROM services s
WHERE s.is_deleted = FALSE
  AND (s.name ILIKE COALESCE('%' || $1::text || '%', '%'))
`

func (q *Queries) CountServices(ctx context.Context, nameFilter pgtype.Text) (int64, error) {
	row := q.db.QueryRow(ctx, countServices, nameFilter)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const getServiceByID = `-- name: GetServiceByID :one
SELECT 
id, name, description, created_at, updated_at, is_deleted 
FROM services s
WHERE
s.id = $1
AND s.is_deleted = FALSE
`

func (q *Queries) GetServiceByID(ctx context.Context, id int32) (Service, error) {
	row := q.db.QueryRow(ctx, getServiceByID, id)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const listServiceVersionsByServiceID = `-- name: ListServiceVersionsByServiceID :many
SELECT
service_id, version_number, created_at, updated_at, is_deleted
FROM service_versions
WHERE
service_id = $1
AND is_deleted = FALSE
`

func (q *Queries) ListServiceVersionsByServiceID(ctx context.Context, serviceID int32) ([]ServiceVersion, error) {
	rows, err := q.db.Query(ctx, listServiceVersionsByServiceID, serviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServiceVersion
	for rows.Next() {
		var i ServiceVersion
		if err := rows.Scan(
			&i.ServiceID,
			&i.VersionNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listServices = `-- name: ListServices :many
SELECT
    s.id,
    s.name,
    s.description,
    s.created_at,
    s.updated_at,
    s.is_deleted
FROM services s
WHERE s.is_deleted = FALSE
  AND (s.name ILIKE COALESCE('%' || $1::text || '%', '%'))
ORDER BY s.name ASC -- fixed sort by name
LIMIT $3 OFFSET $2
`

type ListServicesParams struct {
	NameFilter pgtype.Text
	Offset     int32
	Limit      int32
}

func (q *Queries) ListServices(ctx context.Context, arg ListServicesParams) ([]Service, error) {
	rows, err := q.db.Query(ctx, listServices, arg.NameFilter, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Service
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ping = `-- name: Ping :one
SELECT 1
`

func (q *Queries) Ping(ctx context.Context) (int32, error) {
	row := q.db.QueryRow(ctx, ping)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}
